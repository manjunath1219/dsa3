+*In[ ]:*+
[source, ipython3]
----
Question 1
Given an integer array nums of length n and an integer target, find three integers
in nums such that the sum is closest to the target.
Return the sum of the three integers.

You may assume that each input would have exactly one solution.

Example 1:
Input: nums = [-1,2,1,-4], target = 1
Output: 2

Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
----


+*In[ ]:*+
[source, ipython3]
----
(*)Sort the nums array in ascending order.
(*)Initialize a variable closest_sum to store the closest sum encountered so far. Set it initially to a large value.
(*)Iterate through the array from the first element to the third-to-last element:
Initialize two pointers, left and right, to the next element and the last element of the remaining subarray, respectively.
While left is less than right, calculate the sum of the three integers (nums[i], nums[left], and nums[right]).
(*)Update closest_sum if the absolute difference between the current sum and the target is smaller than the absolute difference
between closest_sum and the target.
If the current sum is greater than the target, decrement right to explore smaller values.
If the current sum is less than the target, increment left to explore larger values.
If the current sum is equal to the target, return the target as the sum of the three integers.
(*)After the iteration, return closest_sum as the closest sum to the target.
----


+*In[1]:*+
[source, ipython3]
----
def threeSumClosest(nums, target):
    nums.sort()
    n = len(nums)
    closest_sum = float('inf')

    for i in range(n - 2):
        left = i + 1
        right = n - 1

        while left < right:
            current_sum = nums[i] + nums[left] + nums[right]
            if abs(current_sum - target) < abs(closest_sum - target):
                closest_sum = current_sum

            if current_sum > target:
                right -= 1
            elif current_sum < target:
                left += 1
            else:
                return target

    return closest_sum
nums = [-1, 2, 1, -4]
target = 1
result = threeSumClosest(nums, target)
print(result)
----


+*Out[1]:*+
----
2
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
Question 2
Given an array nums of n integers, return an array of all the unique quadruplets
[nums[a], nums[b], nums[c], nums[d]] such that:
           ● 0 <= a, b, c, d < n
           ● a, b, c, and d are distinct.
           ● nums[a] + nums[b] + nums[c] + nums[d] == target

You may return the answer in any order.

Example 1:
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
----


+*In[2]:*+
[source, ipython3]
----
def fourSum(nums, target):
    nums.sort()
    n = len(nums)
    result = []

    for i in range(n - 3):
        if i > 0 and nums[i] == nums[i - 1]:
            continue

        for j in range(i + 1, n - 2):
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue

            left = j + 1
            right = n - 1

            while left < right:
                current_sum = nums[i] + nums[j] + nums[left] + nums[right]

                if current_sum < target:
                    left += 1
                elif current_sum > target:
                    right -= 1
                else:
                    result.append([nums[i], nums[j], nums[left], nums[right]])

                    while left < right and nums[left] == nums[left + 1]:
                        left += 1
                    while left < right and nums[right] == nums[right - 1]:
                        right -= 1

                    left += 1
                    right -= 1

    return result
nums = [1, 0, -1, 0, -2, 2]
target = 0
result = fourSum(nums, target)
print(result) 
----


+*Out[2]:*+
----
[[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
💡 **Question 3**
A permutation of an array of integers is an arrangement of its members into a
sequence or linear order.

For example, for arr = [1,2,3], the following are all the permutations of arr:
[1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].

The next permutation of an array of integers is the next lexicographically greater
permutation of its integer. More formally, if all the permutations of the array are
sorted in one container according to their lexicographical order, then the next
permutation of that array is the permutation that follows it in the sorted container.

If such an arrangement is not possible, the array must be rearranged as the
lowest possible order (i.e., sorted in ascending order).

● For example, the next permutation of arr = [1,2,3] is [1,3,2].
● Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
● While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not
have a lexicographical larger rearrangement.

Given an array of integers nums, find the next permutation of nums.
The replacement must be in place and use only constant extra memory.

**Example 1:**
Input: nums = [1,2,3]
Output: [1,3,2]

----


+*In[ ]:*+
[source, ipython3]
----
(*)Start from the rightmost element of the array and find the first pair of adjacent elements (nums[i] and nums[i+1]) where 
nums[i] is smaller than nums[i+1]. If no such pair exists, it means the array is in descending order, and we need to reverse
it to get the lowest possible order.
(*)If a pair is found, it means there exists a lexicographically greater permutation. To find the next permutation, we need 
to find the smallest element in the suffix that is greater than nums[i].
Starting from the right, find the first element (nums[j]) in the suffix (elements after nums[i]) that is greater than nums[i].
Swap nums[i] with nums[j].
(*)After swapping, the suffix is still in descending order. To get the next lexicographically greater permutation, we need to
reverse the suffix (elements after nums[i]) to make it in ascending order.
(*)Return the modified nums array.
----


+*In[3]:*+
[source, ipython3]
----
def nextPermutation(nums):
    n = len(nums)
    i = n - 2

    # Find the first pair of adjacent elements where nums[i] < nums[i+1]
    while i >= 0 and nums[i] >= nums[i + 1]:
        i -= 1

    if i >= 0:
        # Find the smallest element in the suffix that is greater than nums[i]
        j = n - 1
        while j > i and nums[j] <= nums[i]:
            j -= 1
        # Swap nums[i] with nums[j]
        nums[i], nums[j] = nums[j], nums[i]

    # Reverse the suffix to make it in ascending order
    left = i + 1
    right = n - 1
    while left < right:
        nums[left], nums[right] = nums[right], nums[left]
        left += 1
        right -= 1

    return nums
nums = [1, 2, 3]
result = nextPermutation(nums)
print(result)
----


+*Out[3]:*+
----
[1, 3, 2]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
Question 4
Given a sorted array of distinct integers and a target value, return the index if the
target is found. If not, return the index where it would be if it were inserted in
order.

You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2
----


+*In[ ]:*+
[source, ipython3]
----
(*)Initialize two pointers, left and right, pointing to the start and end of the array, respectively.
While left is less than or equal to right, do the following:
(*)Calculate the middle index as mid = (left + right) // 2.
If the value at nums[mid] is equal to the target, return mid.
If the value at nums[mid] is less than the target, update left = mid + 1 to search the right half of the array.
If the value at nums[mid] is greater than the target, update right = mid - 1 to search the left half of the array.
If the target is not found in the array, it means left has moved to the position where the target should be inserted. 
(*)Return left as the index where the target would be inserted.
----


+*In[4]:*+
[source, ipython3]
----
def searchInsert(nums, target):
    left = 0
    right = len(nums) - 1

    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return left
nums = [1, 3, 5, 6]
target = 5
result = searchInsert(nums, target)
print(result)
----


+*Out[4]:*+
----
2
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
💡 **Question 5**
You are given a large integer represented as an integer array digits, where each
digits[i] is the ith digit of the integer. The digits are ordered from most significant
to least significant in left-to-right order. The large integer does not contain any
leading 0's.

Increment the large integer by one and return the resulting array of digits.

**Example 1:**
Input: digits = [1,2,3]
Output: [1,2,4]

**Explanation:** The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].

----


+*In[ ]:*+
[source, ipython3]
----
(*)Initialize a carry variable to 1.
(*)Iterate over the digits array in reverse order:
Add the carry to the current digit.
If the sum exceeds 9, set the current digit to 0 and update the carry to 1.
If the sum does not exceed 9, update the digit to the sum and set the carry to 0.
(*)After the loop, if there is still a carry (e.g., when incrementing 999), insert a new digit with the carry value at the 
beginning of the array.
(*)Return the modified digits array.
----


+*In[5]:*+
[source, ipython3]
----
def plusOne(digits):
    carry = 1
    for i in range(len(digits) - 1, -1, -1):
        digits[i] += carry
        if digits[i] > 9:
            digits[i] = 0
            carry = 1
        else:
            carry = 0

    if carry == 1:
        digits.insert(0, carry)

    return digits
digits = [1, 2, 3]
result = plusOne(digits)
print(result)
----


+*Out[5]:*+
----
[1, 2, 4]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
Question 6
Given a non-empty array of integers nums, every element appears twice except
for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only
constant extra space.

Example 1:
Input: nums = [2,2,1]
Output: 1
----


+*In[ ]:*+
[source, ipython3]
----
(*)Initialize a variable result to 0.
(*)Iterate over each number num in the array nums.
Update result by performing the XOR operation between result and num.
(*)After the loop, the value of result will be the number that appears only once.
(*)Return result.
----


+*In[6]:*+
[source, ipython3]
----
def singleNumber(nums):
    result = 0
    for num in nums:
        result ^= num
    return result
nums = [2, 2, 1]
result = singleNumber(nums)
print(result) 
----


+*Out[6]:*+
----
1
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
Question 7
You are given an inclusive range [lower, upper] and a sorted unique integer array
nums, where all elements are within the inclusive range.

A number x is considered missing if x is in the range [lower, upper] and x is not in
nums.

Return the shortest sorted list of ranges that exactly covers all the missing
numbers. That is, no element of nums is included in any of the ranges, and each
missing number is covered by one of the ranges.

Example 1:
Input: nums = [0,1,3,50,75], lower = 0, upper = 99
Output: [[2,2],[4,49],[51,74],[76,99]]

Explanation: The ranges are:
[2,2]
[4,49]
[51,74]
[76,99]
----


+*In[7]:*+
[source, ipython3]
----
def findMissingRanges(nums, lower, upper):
    result = []
    start = lower

    for num in nums:
        if num == start:
            start += 1
        elif num > start:
            if start == num - 1:
                result.append([start, start])
            elif start < num - 1:
                result.append([start, num - 1])
            start = num + 1

    if start == upper:
        result.append([start, start])
    elif start < upper:
        result.append([start, upper])

    return result
nums = [0, 1, 3, 50, 75]
lower = 0
upper = 99
result = findMissingRanges(nums, lower, upper)
print(result)
----


+*Out[7]:*+
----
[[2, 2], [4, 49], [51, 74], [76, 99]]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
Question 8
Given an array of meeting time intervals where intervals[i] = [starti, endi],
determine if a person could attend all meetings.

Example 1:
Input: intervals = [[0,30],[5,10],[15,20]]
Output: false
----


+*In[ ]:*+
[source, ipython3]
----
(*)Sort the array of intervals based on the start time of each meeting.
(*)Iterate over the sorted intervals starting from the second interval:
Compare the start time of the current interval with the end time of the previous interval.
(*)If the start time of the current interval is less than or equal to the end time of the previous interval, return false as
there is an overlap.
(*)If there are no overlaps, return true as the person can attend all meetings.
----


+*In[8]:*+
[source, ipython3]
----
def canAttendMeetings(intervals):
    intervals.sort(key=lambda x: x[0])  # Sort intervals based on start time

    for i in range(1, len(intervals)):
        if intervals[i][0] < intervals[i - 1][1]:
            return False

    return True
intervals = [[0, 30], [5, 10], [15, 20]]
result = canAttendMeetings(intervals)
print(result)
----


+*Out[8]:*+
----
False
----


+*In[ ]:*+
[source, ipython3]
----

----
